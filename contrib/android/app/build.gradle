import java.text.SimpleDateFormat

def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 26
    defaultConfig {
        if (buildAsApplication) {
            applicationId "ru.hugeping.reinstead"
        }
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 2
        versionName "0.2"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
            // cmake {
            //     arguments "-DANDROID_APP_PLATFORM=android-16", "-DANDROID_STL=c++_static"
            //     // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //     abiFilters 'arm64-v8a'
            // }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
            // cmake {
            //     path 'jni/CMakeLists.txt'
            // }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "ru.hugeping.reinstead.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

task stamp() {
    doLast {
        new File("app/src/main/assets/data", "stamp").createNewFile()
        new File("app/src/main/assets/data", "stamp").text = "${new SimpleDateFormat('ddMMyyyyhhmmss').format(new Date())}"
    }
}

task downloadDependencies() {
    def Reinstead = '0.2'
    def SDL2 = '2.0.16'
    doLast {
        download {
            src "https://github.com/instead-hub/reinstead/archive/${Reinstead}.zip"
            dest new File(buildDir, "reinstead-${Reinstead}.zip")
            overwrite true
        }
        copy {
            from zipTree("${buildDir}/reinstead-${Reinstead}.zip")
            into 'jni/src/'
        }
        delete("jni/src/reinstead")
        file("jni/src/reinstead-${Reinstead}").renameTo(file('jni/src/reinstead'))

        download {
            src "https://www.libsdl.org/release/SDL2-${SDL2}.tar.gz"
            dest buildDir
        }

        delete("jni/SDL")
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2-${SDL2}.tar.gz"))
            into 'jni/'
        }
        file("jni/SDL2-${SDL2}").renameTo(file('jni/SDL'))

        delete("src/main/assets/data")
        copy {
            from "jni/src/reinstead/data"
            into 'src/main/assets/data'
        }
        copy {
            from "config.lua"
            into 'src/main/assets/data/core/'
        }
        delete("src/main/assets/data/stead3/morph/morphs.mrd")
    }
}

preBuild.dependsOn stamp
